var Population = require('./population');

var Simulate = function(num, pop) {
  var start_chrom_vals;
  var end_chrom_vals;

  // run the simulation (num) number of times (num is number of generations)
  for (let i = 0; i < num; i++) {
    // get array of all the numerical chromosome values
    let chrom_vals = pop.chrom_vals;

    // get array of individual fitness scores (calculated based on numerical chrom vals)
    let fitness = pop.fitness;
    
    // get array of individual probablities of mating (calculated based on fitness scores)
    let probs = pop.probs;

    // collect population's average chrom value for the FIRST generation
    if (i === 0) {
      let sum = chrom_vals.reduce(function(acc, cur) {
        return acc + cur;
      }, 0);
      start_chrom_vals = Math.floor(sum/pop.size);
    }

    // collect population's average chrom value for the LAST generation
    if (i === (num-1)) {
      let sum = chrom_vals.reduce(function(acc, cur) {
        return acc + cur;
      }, 0);
      end_chrom_vals = Math.floor(sum/pop.size);
    }

    // create the same number of children as the starting pop by mating
    var new_pop = [];
    for (let i = 0; i < pop.size; i++) {
      new_pop.push(pop.mate());
    }

    // initialize a new population using the pop generated by mating
    var pop_hash = {};
    pop_hash["population"] = new_pop;
    pop_hash["env"] = pop.env;

    pop = new Population(pop_hash);
  }

  return pop;
}

module.exports = Simulate;
